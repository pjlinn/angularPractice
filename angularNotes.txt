DOM - Document Object Model:To render a document such as an HTML page, most web browsers use an internal model similar to the DOM. The nodes of every document are organized in a tree structure, called the DOM tree, with topmost node named "Document object". When an HTML page is rendered in browsers, the browser downloads the HTML into local memory and automatically parses it to display the page on screen. The DOM is also the way JavaScript transmits the state of the browser in HTML pages.

=============================================================================

Model-View-Controller Design Pattern: is a software pattern for implementing user interfaces. It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user. The central component, the model, consists of application data, business rules, logic, and functions. A view can be any output representation of information, such as a chart or a diagram. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants. The third part, the controller, accepts input and converts it to commands for the model or view.

	- Controller: A controller can send commands to the model to update the model's state (e.g., editing a document). It can also send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document).

	- Model: A model notifies its associated views and controllers when there has been a change in its state. This notification allows views to update their presentation, and the controllers to change the available set of commands. In some cases an MVC implementation might instead be "passive," so that other components must poll the model for updates rather than being notified.

	- View: A view is told by the controller all the information it needs for generating an output representation to the user. It can also provide generic mechanisms to inform the controller of user input.

	In Angular, the view is a projection of the model through the HTML template. This means that whenever the model changes, Angular refreshes the appropriate binding points, which updates the view.

=============================================================================

Angular Directives: At a high level, directives are markers on a DOM element (such as an attribute, element name, or CSS class) that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element or even transform the DOM element and its children.

	- ng-app: Use this directive to auto-bootstrap an AngularJS application. The ngApp directive designates the root element of the application and is typically placed near the root element of the page - e.g. on the <body> or <html> tags.

	The first ngApp found in the document will be used to define the root element to auto-bootstrap as an application.

	You can specify an AngularJS module to be used as the root module for the application. This module will be loaded into the AUTO.$injector when the application is bootstrapped and should contain the application code needed or have dependencies on other modules that will contain the code. See angular.module for more information.

	ngApp is the easiest, and most common, way to bootstrap an application.

-----------------------------------------------------------------

	- ng-src: Using Angular markup like {{hash}} in a src attribute doesn't work right: The browser will fetch from the URL with the literal text {{hash}} until Angular replaces the expression inside {{hash}}. The ngSrc directive solves this problem. 

	Using the ngSrc directive prevents the browser from making an http request to an invalid location.

-----------------------------------------------------------------

	- ngBind: The ngBind attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.

	Typically, you don't use ngBind directly, but instead you use the double curly markup like {{ expression }} which is similar but less verbose.

	It is preferrable to use ngBind instead of {{ expression }} when a template is momentarily displayed by the browser in its raw state before Angular compiles it. Since ngBind is an element attribute, it makes the bindings invisible to the user while the page is loading.

-----------------------------------------------------------------

	- ngCloak: The ngCloak directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.

	The directive can be applied to the <body> element, but the preferred usage is to apply multiple ngCloak directives to small portions of the page to permit progressive rendering of the browser view.

-----------------------------------------------------------------

	-ngBindTemplate: The ngBindTemplate directive specifies that the element text content should be replaced with the interpolation of the template in the ngBindTemplate attribute. Unlike ngBind, the ngBindTemplate can contain multiple {{ }} expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.

-----------------------------------------------------------------

	-ngCsp: Enables CSP (Content Security Policy) support.

	This is necessary when developing things like Google Chrome Extensions.

	CSP forbids apps to use eval or Function(string) generated functions (among other things). For us to be compatible, we just need to implement the "getterFn" in $parse without violating any of these restrictions.

	AngularJS uses Function(string) generated functions as a speed optimization. Applying the ngCsp directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will be raised.

-----------------------------------------------------------------

	- ng-repeat: The ngRepeat directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key

-----------------------------------------------------------------	

	- ngInit: The ngInit directive allows you to evaluate an expression in the current scope.

	The only appropriate use of ngInit is for aliasing special properties of ngRepeat, as seen in the demo below. Besides this case, you should use controllers rather than ngInit to initialize values on a scope.

-----------------------------------------------------------------

	- ngController: The ngController directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.

	MVC components in angular:

		Model — The Model is scope properties; scopes are attached to the DOM where scope properties are accessed through bindings.

		View — The template (HTML with data bindings) that is rendered into the View.

		Controller — The ngController directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values

	Note that you can also attach controllers to the DOM by declaring it in a route definition via the $route service. A common mistake is to declare the controller again using ng-controller in the template itself. This will cause the controller to be attached and executed twice.	

-----------------------------------------------------------------

	- ngRoute: The ngRoute module provides routing and deeplinking services and directives for angular apps.

=============================================================================

Script Tags:

	- <script src="lib/angular/angular.js"> : This code downloads the angular.js script and registers a callback that will be executed by the browser when the containing HTML page is fully downloaded. When the callback is executed, Angular looks for the ngApp directive. If Angular finds the directive, it will bootstrap the application with the root of the application DOM being the element on which the ngApp directive was defined.

=============================================================================

Angular Templating Capabilities:

	- Data Binding:  binding, denoted by double-curlies {{ }} as well as a simple expression. The binding tells Angular that it should evaluate an expression and insert the result into the DOM in place of the binding. Rather than a one-time insert, as we'll see in the next steps, a binding will result in efficient continuous updates whenever the result of the expression evaluation changes.

	- Expressions: Expressions are JavaScript-like code snippets that are usually placed in bindings such as {{ expression }}. Expressions are processed by the $parse service. Expressions are often post processed using filters to create a more user-friendly format.

=============================================================================

Filters: Selects a subset of items from array and returns it as a new array.

	- orderBy: Orders a specified array by the expression predicate.

=============================================================================

Services:
	
	- $parse: service in Module ng: Converts Angular expression into a function.

-----------------------------------------------------------------

	- $route: service in module ngRoute: $route is used for deep-linking URLs to controllers and views (HTML partials). It watches $location.url() and tries to map the path to an existing route definition.

	Requires the ngRoute module to be installed.

	You can define routes through $routeProvider's API.

	The $route service is typically used in conjunction with the ngView directive and the $routeParams service.

-----------------------------------------------------------------

	- $rootScope: service in Module ng: Every application has a single root scope. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide an event emission/broadcast and subscription facility. See the developer guide on scopes.

-----------------------------------------------------------------

	- $injector - service in module AUTO: is used to retrieve object instances as defined by provider, instantiate types, invoke methods, and load modules.

-----------------------------------------------------------------

	- $provide - service in module AUTO: The $provide service has a number of methods for registering components with the $injector. Many of these functions are also exposed on angular.Module.

	An Angular service is a singleton object created by a service factory. These service factories are functions which, in turn, are created by a service provider. The service providers are constructor functions. When instantiated they must contain a property called $get, which holds the service factory function.

	When you request a service, the $injector is responsible for finding the correct service provider, instantiating it and then calling its $get service factory function to get the instance of the service.

-----------------------------------------------------------------

	- $controller: In practice, you will not want to have your controller functions in the global namespace. Instead, we have registered our controllers in the phonecatApp module. In this case Angular provides a service, $controller, which will retrieve your controller by name.

=============================================================================

Angular Modules: A module is a collection of services, directives, filters, and configuration information. angular.module is used to configure the $injector.

	- angular.module: The angular.module is a global place for creating, registering and retrieving Angular modules. All modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.

	When passed two or more arguments, a new module is created. If passed only one argument, an existing module (the name passed as the first argument to module) is retrieved.

-----------------------------------------------------------------

	- routeProvider: Used for configuring routes.

=============================================================================

Type:

	- Scope - type in module ng: A root scope can be retrieved using the $rootScope key from the $injector. Child scopes are created using the $new() method. (Most scopes are created automatically when compiled HTML template is executed.)

	This scope is a prototypical descendant of the root scope that was created when the application was defined. This controller scope is available to all bindings located within the <body ng-controller="PhoneListCtrl"> tag.

	The concept of a scope in Angular is crucial. A scope can be seen as the glue which allows the template, model and controller to work together. Angular uses scopes, along with the information contained in the template, data model, and controller, to keep models and views separate, but in sync. Any changes made to the model are reflected in the view; any changes that occur in the view are reflected in the model.

=============================================================================

Testing:

	- e2e-testing: As applications grow in size and complexity, it becomes unrealistic to rely on manual testing to verify the correctness of new features, catch bugs and notice regressions.

	To solve this problem, we have built an Angular Scenario Runner which simulates user interactions that will help you verify the health of your Angular application.

-----------------------------------------------------------------

	- Protractor is an end to end test framework for AngularJS applications built on top of WebDriverJS. Protractor runs tests against your application running in a real browser, interacting with it as a user would.

	Protractor can be run as a standalone binary, or included into your tests as a library. Use Protractor as a library if you would like to manage WebDriver and your test setup yourself.

=============================================================================

Services: Services are a feature that Angular brings to client-side web apps from the server side, where services have been commonly used for a long time. Services in Angular apps are substitutable objects that are wired together using dependency injection (DI).

	- Dependency Injection: Dependency Injection (DI) is a software design pattern that deals with how code gets hold of its dependencies.

	For in-depth discussion about DI, see Dependency Injection at Wikipedia, Inversion of Control by Martin Fowler, or read about DI in your favorite software design pattern book.

-----------------------------------------------------------------

	- http: The $http service is a core Angular service that facilitates communication with the remote HTTP servers via the browser's XMLHttpRequest object or via JSONP.

	For unit testing applications that use $http service, see $httpBackend mock.

	For a higher level of abstraction, please check out the $resource service.

	The $http API is based on the deferred/promise APIs exposed by the $q service. While for simple usage patterns this doesn't matter much, for advanced usage it is important to familiarize yourself with these APIs and the guarantees they provide.

-----------------------------------------------------------------

- q: A promise/deferred implementation inspired by Kris Kowal's Q.

	The CommonJS Promise proposal describes a promise as an interface for interacting with an object that represents the result of an action that is performed asynchronously, and may or may not be finished at any given point in time.

	From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what try, catch and throw keywords are to synchronous programming.